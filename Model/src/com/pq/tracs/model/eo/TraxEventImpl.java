package com.pq.tracs.model.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 23 09:47:08 EDT 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxEventImpl extends PrmBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxEventImpl obj) {
                return obj.getId();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        EventType {
            public Object get(TraxEventImpl obj) {
                return obj.getEventType();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setEventType((String)value);
            }
        }
        ,
        EventDate {
            public Object get(TraxEventImpl obj) {
                return obj.getEventDate();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setEventDate((Date)value);
            }
        }
        ,
        EventName {
            public Object get(TraxEventImpl obj) {
                return obj.getEventName();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setEventName((String)value);
            }
        }
        ,
        Description {
            public Object get(TraxEventImpl obj) {
                return obj.getDescription();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(TraxEventImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(TraxEventImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(TraxEventImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(TraxEventImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Note {
            public Object get(TraxEventImpl obj) {
                return obj.getNote();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setNote((String)value);
            }
        }
        ,
        TraxEventContentOwner {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventContentOwner();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventNote {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventNote();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventActivity {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventActivity();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventAttachment {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventAttachment();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventContract {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventContract();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventNote1 {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventNote1();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventOpportunity {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventOpportunity();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventTitle {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventTitle();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxEventUser {
            public Object get(TraxEventImpl obj) {
                return obj.getTraxEventUser();
            }

            public void put(TraxEventImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxEventImpl object);

        public abstract void put(TraxEventImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int EVENTTYPE = AttributesEnum.EventType.index();
    public static final int EVENTDATE = AttributesEnum.EventDate.index();
    public static final int EVENTNAME = AttributesEnum.EventName.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int NOTE = AttributesEnum.Note.index();
    public static final int TRAXEVENTCONTENTOWNER = AttributesEnum.TraxEventContentOwner.index();
    public static final int TRAXEVENTNOTE = AttributesEnum.TraxEventNote.index();
    public static final int TRAXEVENTACTIVITY = AttributesEnum.TraxEventActivity.index();
    public static final int TRAXEVENTATTACHMENT = AttributesEnum.TraxEventAttachment.index();
    public static final int TRAXEVENTCONTRACT = AttributesEnum.TraxEventContract.index();
    public static final int TRAXEVENTNOTE1 = AttributesEnum.TraxEventNote1.index();
    public static final int TRAXEVENTOPPORTUNITY = AttributesEnum.TraxEventOpportunity.index();
    public static final int TRAXEVENTTITLE = AttributesEnum.TraxEventTitle.index();
    public static final int TRAXEVENTUSER = AttributesEnum.TraxEventUser.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxEventImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxEvent");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for EventType, using the alias name EventType.
     * @return the EventType
     */
    public String getEventType() {
        return (String)getAttributeInternal(EVENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EventType.
     * @param value value to set the EventType
     */
    public void setEventType(String value) {
        setAttributeInternal(EVENTTYPE, value);
    }

    /**
     * Gets the attribute value for EventDate, using the alias name EventDate.
     * @return the EventDate
     */
    public Date getEventDate() {
        return (Date)getAttributeInternal(EVENTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EventDate.
     * @param value value to set the EventDate
     */
    public void setEventDate(Date value) {
        setAttributeInternal(EVENTDATE, value);
    }

    /**
     * Gets the attribute value for EventName, using the alias name EventName.
     * @return the EventName
     */
    public String getEventName() {
        return (String)getAttributeInternal(EVENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for EventName.
     * @param value value to set the EventName
     */
    public void setEventName(String value) {
        setAttributeInternal(EVENTNAME, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Gets the attribute value for Note, using the alias name Note.
     * @return the Note
     */
    public String getNote() {
        return (String)getAttributeInternal(NOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Note.
     * @param value value to set the Note
     */
    public void setNote(String value) {
        setAttributeInternal(NOTE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventContentOwner() {
        return (RowIterator)getAttributeInternal(TRAXEVENTCONTENTOWNER);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventNote() {
        return (RowIterator)getAttributeInternal(TRAXEVENTNOTE);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventActivity() {
        return (RowIterator)getAttributeInternal(TRAXEVENTACTIVITY);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventAttachment() {
        return (RowIterator)getAttributeInternal(TRAXEVENTATTACHMENT);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventContract() {
        return (RowIterator)getAttributeInternal(TRAXEVENTCONTRACT);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventNote1() {
        return (RowIterator)getAttributeInternal(TRAXEVENTNOTE1);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventOpportunity() {
        return (RowIterator)getAttributeInternal(TRAXEVENTOPPORTUNITY);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventTitle() {
        return (RowIterator)getAttributeInternal(TRAXEVENTTITLE);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxEventUser() {
        return (RowIterator)getAttributeInternal(TRAXEVENTUSER);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);
    }
}

package com.pq.tracs.model.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 23 09:47:23 EDT 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxEventContentOwnerImpl extends PrmBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getId();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        EventId {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getEventId();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setEventId((Number)value);
            }
        }
        ,
        ContentOwnerId {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getContentOwnerId();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setContentOwnerId((Number)value);
            }
        }
        ,
        AddedDte {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getAddedDte();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setAddedDte((Date)value);
            }
        }
        ,
        RemovedDate {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getRemovedDate();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setRemovedDate((Date)value);
            }
        }
        ,
        CreatedBy {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxContentOwner {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getTraxContentOwner();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setTraxContentOwner((TraxContentOwnerImpl)value);
            }
        }
        ,
        TraxEvent {
            public Object get(TraxEventContentOwnerImpl obj) {
                return obj.getTraxEvent();
            }

            public void put(TraxEventContentOwnerImpl obj, Object value) {
                obj.setTraxEvent((TraxEventImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxEventContentOwnerImpl object);

        public abstract void put(TraxEventContentOwnerImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int EVENTID = AttributesEnum.EventId.index();
    public static final int CONTENTOWNERID = AttributesEnum.ContentOwnerId.index();
    public static final int ADDEDDTE = AttributesEnum.AddedDte.index();
    public static final int REMOVEDDATE = AttributesEnum.RemovedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int TRAXCONTENTOWNER = AttributesEnum.TraxContentOwner.index();
    public static final int TRAXEVENT = AttributesEnum.TraxEvent.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxEventContentOwnerImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxEventContentOwner");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for EventId, using the alias name EventId.
     * @return the EventId
     */
    public Number getEventId() {
        return (Number)getAttributeInternal(EVENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EventId.
     * @param value value to set the EventId
     */
    public void setEventId(Number value) {
        setAttributeInternal(EVENTID, value);
    }

    /**
     * Gets the attribute value for ContentOwnerId, using the alias name ContentOwnerId.
     * @return the ContentOwnerId
     */
    public Number getContentOwnerId() {
        return (Number)getAttributeInternal(CONTENTOWNERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContentOwnerId.
     * @param value value to set the ContentOwnerId
     */
    public void setContentOwnerId(Number value) {
        setAttributeInternal(CONTENTOWNERID, value);
    }

    /**
     * Gets the attribute value for AddedDte, using the alias name AddedDte.
     * @return the AddedDte
     */
    public Date getAddedDte() {
        return (Date)getAttributeInternal(ADDEDDTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AddedDte.
     * @param value value to set the AddedDte
     */
    public void setAddedDte(Date value) {
        setAttributeInternal(ADDEDDTE, value);
    }

    /**
     * Gets the attribute value for RemovedDate, using the alias name RemovedDate.
     * @return the RemovedDate
     */
    public Date getRemovedDate() {
        return (Date)getAttributeInternal(REMOVEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RemovedDate.
     * @param value value to set the RemovedDate
     */
    public void setRemovedDate(Date value) {
        setAttributeInternal(REMOVEDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity com.pq.tracs.model.eo.PrmBaseEntity.
     */
    public TraxContentOwnerImpl getTraxContentOwner() {
        return (TraxContentOwnerImpl)getAttributeInternal(TRAXCONTENTOWNER);
    }

    /**
     * Sets <code>value</code> as the associated entity com.pq.tracs.model.eo.PrmBaseEntity.
     */
    public void setTraxContentOwner(TraxContentOwnerImpl value) {
        setAttributeInternal(TRAXCONTENTOWNER, value);
    }

    /**
     * @return the associated entity TraxEventImpl.
     */
    public TraxEventImpl getTraxEvent() {
        return (TraxEventImpl)getAttributeInternal(TRAXEVENT);
    }

    /**
     * Sets <code>value</code> as the associated entity TraxEventImpl.
     */
    public void setTraxEvent(TraxEventImpl value) {
        setAttributeInternal(TRAXEVENT, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);
    }
    
    // In ProductsBaseImpl.java
    public void postChanges(TransactionEvent e) {
      /* If current entity is new or modified */
      if (getPostState() == STATUS_NEW ||
          getPostState() == STATUS_MODIFIED) {
        /* Get the associated supplier for the product */
        TraxEventImpl event = this.getTraxEvent();
        /* If there is an associated supplier */
        if (event != null) {
          /* And if it's post-status is NEW */
          if (event.getPostState() == STATUS_NEW) {
            /*
             * Post the supplier first, before posting this
             * entity by calling super below
             */
            event.postChanges(e);
          }
        }
      }
      super.postChanges(e);
    }

}
